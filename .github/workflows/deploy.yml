name: CI/CD Deploy to GCP VM with Docker and Cloud SQL

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with GCP Artifact Registry
        run: |
               echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > key.json
               gcloud auth activate-service-account --key-file=key.json
               gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: '1'

      - name: Build and push backend Docker image 
        run: |
              docker build -t asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-backend/kitsup-backend ./kitsup-backend
              docker push asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-backend/kitsup-backend

      - name: Build and push frontend Docker image  
        run: |
              docker build -t asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-frontend/kitsup-front ./kitsup-front
              docker push asia-south1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-frontend/kitsup-front


      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/gcp_key
          chmod 600 ~/.ssh/gcp_key
          ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

      - name: Verify Docker on VM
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/gcp_key ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} << 'DOCKER_CHECK'
          set -e
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo usermod -aG docker $USER
          fi
          DOCKER_CHECK

      - name: Deploy containers on GCP VM
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/gcp_key ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} << 'DEPLOY_EOF'
          set -e

          echo "📁 Navigating to deployment folder..."
          cd ~/kitsquiz 

          echo "🔄 Pulling latest backend image..."
          docker pull us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-backend/kitsup-backend

          echo "🔄 Pulling latest frontend image..."
          docker pull us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-frontend/kitsup-front

          echo "🛑 Stopping existing containers (if any)..."
          docker stop backend-app || true && docker rm backend-app || true
          docker stop frontend-app || true && docker rm frontend-app || true

          echo "Starting backend container..."
          docker run -d --restart unless-stopped --name backend-app \
            -p 8080:8080 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e USE_LOCAL_DB=${{ secrets.USE_LOCAL_DB }} \
            us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-backend/kitsup-backend

          echo "Starting frontend container..."
          docker run -d --restart unless-stopped --name frontend-app -p 80:80 \
            us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/kitsup-frontend/kitsup-front
          DEPLOY_EOF
