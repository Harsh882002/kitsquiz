name: CI/CD Deploy to GCP VM with Docker and Cloud SQL

on:
  push:
    branches: [main]

env:
  ARTIFACT_REGISTRY: us-docker.pkg.dev
  BACKEND_IMAGE: kitsup-backend/kitsup-backend
  FRONTEND_IMAGE: kitsup-frontend/kitsup-front
  VM_DEPLOY_DIR: ~/kitsquiz

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet

      - name: Build and push backend Docker image
        run: |
          docker build \
            --build-arg ENV=production \
            -t ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.BACKEND_IMAGE }} \
            ./kitsup-backend
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.BACKEND_IMAGE }}

      - name: Build and push frontend Docker image
        run: |
          docker build \
            --build-arg VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE }} \
            ./kitsup-front
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}

      - name: Setup SSH Deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/gcp_key
          chmod 600 ~/.ssh/gcp_key
          ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

      - name: Deploy containers on GCP VM
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/gcp_key ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} << 'DEPLOY_EOF'
          set -euo pipefail
          
          echo "📦 Pulling latest Docker images..."
          docker pull ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.BACKEND_IMAGE }}
          docker pull ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}

          echo "♻️ Stopping and removing old containers..."
          docker stop backend-app || true && docker rm backend-app || true
          docker stop frontend-app || true && docker rm frontend-app || true

          echo "🚀 Starting new containers..."
          
          # Backend with health check
          docker run -d \
            --name backend-app \
            --restart unless-stopped \
            --health-cmd="curl --fail http://localhost:8080/api/health || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            -p 8080:8080 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.BACKEND_IMAGE }}

          # Frontend with proper network config
          docker run -d \
            --name frontend-app \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            --link backend-app:backend \
            ${{ env.ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE }}

          echo "🔍 Verifying deployment..."
          sleep 10
          docker ps --filter "status=running" --format "table {{.Names}}\t{{.Status}}"
          DEPLOY_EOF

      - name: Verify Deployment
        run: |
          curl -sSf http://${{ secrets.GCP_VM_IP }}/api/health
          curl -sSf http://${{ secrets.GCP_VM_IP }}